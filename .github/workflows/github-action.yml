name: 'Food Interpreter Workflow'
on: [push]
jobs:
  run-tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@master
      - name: Setup Go
        uses: actions/setup-go@v5.1.0
        with:
          go-version: '1.23.0'
          cache-dependency-path: "**/*.sum" # TODO, new error, "Restore cache failed: Some specified paths were not resolved, unable to cache dependencies."
          cache: true
      - name: Run Lexer tests
        run: cd lexer && go test -v
  generate-release: # TODO chore() doesn't count as release
    needs: run-tests
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    outputs:
      version: ${{ steps.get-version.outputs.version }}
    steps:
      - uses: actions/checkout@master
      - uses: actions/setup-node@v4
        with:
          node-version: 20.8.1
      - name: Get release version
        id: get-version
        run: |
          export VERSION=$(npx semantic-release --dry-run | grep 'The next release version is' | sed -E 's/.* ([[:digit:].]+)$/\1/')
          echo "Found version: ${VERSION}"
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Generate release
        run: |
          npm install semantic-release@19
          npm install @semantic-release/exec
          npx semantic-release@19
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  terraform-plan:
    needs: generate-release # TODO remove generate-release once a better way of versioning is done
    environment: prod
    permissions:
      contents: 'read'
      id-token: 'write'
    runs-on: ubuntu-latest
    steps:
      - name: Setup Github Actions checkout
        uses: actions/checkout@v4.2.2
      - name: Setup Workload Identity Federation
        uses: google-github-actions/auth@v2
        with:
          create_credentials_file: true
          workload_identity_provider: 'projects/${{ vars.GCP_WIF_PROJECT_NUMBER }}/locations/global/workloadIdentityPools/${{ vars.POOL_ID }}/providers/${{ vars.PROVIDER_ID }}'
          service_account: '${{ secrets.GCP_SERVICE_ACCOUNT_EMAIL }}'
      - name: Terraform action
        uses: asison19/github-actions/composite-actions/terraform-action@v1.3.1
        with:
          working-directory: ${{ github.workspace }}/iac/terraform/main
      - name: Run Terraform Plan
        run: |
          terraform plan
          echo "version:" ${{ needs.generate-release.outputs.version }}
        working-directory: ${{ github.workspace }}/iac/terraform/main
        env:
          TF_VAR_GCP_PROJECT_ID: ${{ vars.GCP_PROJECT_ID }}
          TF_VAR_GCP_PROJECT_REGION: ${{ vars.GCP_PROJECT_REGION }}
          #TF_VAR_FOOD_INTERPRETER_IMAGE_VERSION: ${{ needs.generate-release.outputs.version }} # TODO ArgoCD deployments for kubernetes?
          TF_VAR_ENABLE_KUBERNETES: ${{ vars.ENABLE_KUBERNETES }}
  terraform-apply:
    needs: [generate-release, terraform-plan]
    environment: prod
    permissions:
      contents: 'read'
      id-token: 'write'
    runs-on: ubuntu-latest
    steps:
      - name: Setup Github Actions checkout
        uses: actions/checkout@v4.2.2
      - name: Setup Workload Identity Federation
        uses: google-github-actions/auth@v2
        with:
          create_credentials_file: true
          workload_identity_provider: 'projects/${{ vars.GCP_WIF_PROJECT_NUMBER }}/locations/global/workloadIdentityPools/${{ vars.POOL_ID }}/providers/${{ vars.PROVIDER_ID }}'
          service_account: '${{ secrets.GCP_SERVICE_ACCOUNT_EMAIL }}'
      - name: Terraform action
        uses: asison19/github-actions/composite-actions/terraform-action@v1.3.1
        with:
          working-directory: ${{ github.workspace }}/iac/terraform/main
      - name: Run Terraform Apply
        run: |
          terraform apply -auto-approve
          echo "version:" ${{ needs.generate-release.outputs.version }}
        working-directory: ${{ github.workspace }}/iac/terraform/main
        env:
          TF_VAR_GCP_PROJECT_ID: ${{ vars.GCP_PROJECT_ID }}
          TF_VAR_GCP_PROJECT_REGION: ${{ vars.GCP_PROJECT_REGION }}
          TF_VAR_ENABLE_KUBERNETES: ${{ vars.ENABLE_KUBERNETES }}
  # TODO don't push (or generate) a new image if it never changed. Breaks this workflow and the Terraform apply. ArgoCD?
  push-docker-image:
    needs: [run-tests, generate-release]
    environment: prod
    permissions:
      contents: read
      id-token: write
    runs-on: ubuntu-latest
    steps:
      - name: Setup Github Actions checkout
        uses: actions/checkout@v4.2.2
      - name: Setup Workload Identity Federation
        id: auth
        uses: google-github-actions/auth@v2
        with:
          token_format: access_token
          workload_identity_provider: 'projects/${{ vars.GCP_WIF_PROJECT_NUMBER }}/locations/global/workloadIdentityPools/${{ vars.POOL_ID }}/providers/${{ vars.PROVIDER_ID }}'
          service_account: '${{ secrets.GCP_SERVICE_ACCOUNT_EMAIL }}'
      - name: Get Short GitHub SHA
        run: echo "SHA_SHORT=${GITHUB_SHA::7}" >> $GITHUB_ENV
      - name: Build Docker Image
        run: 'docker build -t food-interpreter .'
      - name: Login to GAR
        uses: docker/login-action@v3
        with:
          registry: us-central1-docker.pkg.dev
          username: oauth2accesstoken
          password: ${{ steps.auth.outputs.access_token }}
      - name: Push Docker Image
        uses: docker/build-push-action@v2
        with:
          push: true
          build-args: |
            IMAGE_VERSION=${{ needs.generate-release.outputs.version }}
          # TODO semantic versioning only happens on master branch. Make it such that other branches have branch name in it for the version to differentiate and have it possible for other branches to push to push to GCP.
          tags: |
            us-central1-docker.pkg.dev/${{ vars.GCP_PROJECT_ID }}/food-interpreter-repository/food-interpreter:latest
            us-central1-docker.pkg.dev/${{ vars.GCP_PROJECT_ID }}/food-interpreter-repository/food-interpreter:${{ env.SHA_SHORT }}
            us-central1-docker.pkg.dev/${{ vars.GCP_PROJECT_ID }}/food-interpreter-repository/food-interpreter:${{ needs.generate-release.outputs.version }}
      - name: Update Cloud Run Service to latest image
        run: gcloud run services update ${{ vars.GCP_CLOUD_RUN_SERVICE_NAME }} --image us-central1-docker.pkg.dev/${{ vars.GCP_PROJECT_ID }}/food-interpreter-repository/food-interpreter:latest --region ${{ vars.GCP_PROJECT_REGION }}