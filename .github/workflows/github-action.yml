name: 'Food Interpreter Workflow'
on: [push]
jobs:
  run-tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@master
      - name: Setup Go
        uses: actions/setup-go@v5.1.0
        with:
          go-version: '1.23.0'
          cache-dependency-path: "**/*.sum" # TODO, new error, "Restore cache failed: Some specified paths were not resolved, unable to cache dependencies."
          cache: true
      - name: Run Lexer tests
        run: cd lexer && go test -v
  generate-release:
    needs: run-tests
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    outputs:
      version: ${{ steps.get-version.outputs.version }}
    steps:
      - uses: actions/checkout@master
      - uses: actions/setup-node@v4
        with:
          node-version: 20.8.1
      - name: Get release version
        id: get-version
        run: |
          export VERSION=$(npx semantic-release --dry-run | grep 'The next release version is' | sed -E 's/.* ([[:digit:].]+)$/\1/')
          echo "Found version: ${VERSION}"
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Generate release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: ./scripts/generate-release.sh
  terraform-plan:
    needs: generate-release # TODO remove generate-release once a better way of versioning is done
    environment: prod
    permissions:
      contents: 'read'
      id-token: 'write'
    runs-on: ubuntu-latest
    steps:
      - name: Setup Github Actions checkout
        uses: actions/checkout@v4.2.2
      - name: Setup Workload Identity Federation
        uses: google-github-actions/auth@v2
        with:
          create_credentials_file: true
          workload_identity_provider: 'projects/${{ vars.GCP_WIF_PROJECT_NUMBER }}/locations/global/workloadIdentityPools/${{ vars.POOL_ID }}/providers/${{ vars.PROVIDER_ID }}'
          service_account: '${{ secrets.GCP_SERVICE_ACCOUNT_EMAIL }}'
      - name: Terraform action
        uses: asison19/github-actions/composite-actions/terraform-action@v1.3.1
        with:
          working-directory: ${{ github.workspace }}/iac/terraform/main
      - name: Run Terraform Plan
        run: |
          terraform plan
          echo "version:" ${{ needs.generate-release.outputs.version }}
        working-directory: ${{ github.workspace }}/iac/terraform/main
        env:
          TF_VAR_GCP_PROJECT_ID: ${{ vars.GCP_PROJECT_ID }}
          TF_VAR_GCP_PROJECT_NUMBER: ${{ vars.GCP_PROJECT_NUMBER }}
          TF_VAR_GCP_PROJECT_REGION: ${{ vars.GCP_PROJECT_REGION }}
          #TF_VAR_FOOD_INTERPRETER_IMAGE_VERSION: ${{ needs.generate-release.outputs.version }} # TODO ArgoCD deployments for kubernetes?
          TF_VAR_ENABLE_KUBERNETES: ${{ vars.ENABLE_KUBERNETES }}
  terraform-apply:
    needs: [generate-release, terraform-plan]
    environment: prod
    permissions:
      contents: 'read'
      id-token: 'write'
    runs-on: ubuntu-latest
    outputs:
      interpreter_pubsub_topic_id: ${{ steps.terraform-output.outputs.interpreter_pubsub_topic_id }}
      interpreter_grpc_cloud_run_uri: ${{ steps.terraform-output.outputs.interpreter_grpc_cloud_run_uri }}
      gateway_cloud_run_uri: ${{ steps.terraform-output.outputs.gateway_cloud_run_uri }}
    steps:
      - name: Setup Github Actions checkout
        uses: actions/checkout@v4.2.2
      - name: Setup Workload Identity Federation
        uses: google-github-actions/auth@v2
        with:
          create_credentials_file: true
          workload_identity_provider: 'projects/${{ vars.GCP_WIF_PROJECT_NUMBER }}/locations/global/workloadIdentityPools/${{ vars.POOL_ID }}/providers/${{ vars.PROVIDER_ID }}'
          service_account: '${{ secrets.GCP_SERVICE_ACCOUNT_EMAIL }}'
      - name: Terraform action
        uses: asison19/github-actions/composite-actions/terraform-action@v1.3.1
        with:
          working-directory: ${{ github.workspace }}/iac/terraform/main
      - name: Run Terraform Apply
        run: |
          terraform apply -auto-approve
          echo "version:" ${{ needs.generate-release.outputs.version }}
        working-directory: ${{ github.workspace }}/iac/terraform/main
        env:
          TF_VAR_GCP_PROJECT_ID: ${{ vars.GCP_PROJECT_ID }}
          TF_VAR_GCP_PROJECT_NUMBER: ${{ vars.GCP_PROJECT_NUMBER }}
          TF_VAR_GCP_PROJECT_REGION: ${{ vars.GCP_PROJECT_REGION }}
          TF_VAR_ENABLE_KUBERNETES: ${{ vars.ENABLE_KUBERNETES }}
      - name: Get Terraform Output
        id: terraform-output
        working-directory: ${{ github.workspace }}/iac/terraform/main
        run: echo "$(terraform output --json)" | jq -r 'keys[] as $k | "\($k)=\(.[$k].value)"' >> $GITHUB_OUTPUT
  # TODO don't push (or generate) a new image if it never changed. Breaks this workflow and the Terraform apply. ArgoCD?
  # TODO should be able to push without needing to run terraform apply everytime. Once GAR and topic (for interpreter) are created, we only need the name/id. Variabilize topic? GAR needs?
  # TODO Terraform-apply fails if there's no image for the Cloud run service
  push-docker-image:
    needs: [run-tests, generate-release, terraform-apply]
    environment: prod
    permissions:
      contents: read
      id-token: write
    runs-on: ubuntu-latest
    steps:
      - name: Setup Github Actions checkout
        uses: actions/checkout@v4.2.2
      - name: Setup Workload Identity Federation
        id: auth
        uses: google-github-actions/auth@v2
        with:
          token_format: access_token
          workload_identity_provider: 'projects/${{ vars.GCP_WIF_PROJECT_NUMBER }}/locations/global/workloadIdentityPools/${{ vars.POOL_ID }}/providers/${{ vars.PROVIDER_ID }}'
          service_account: '${{ secrets.GCP_SERVICE_ACCOUNT_EMAIL }}'
      - name: Get Short GitHub SHA
        run: echo "SHA_SHORT=${GITHUB_SHA::7}" >> $GITHUB_ENV
      - name: Build Docker Images
        run: 'docker compose build'
      - name: Login to GAR
        uses: docker/login-action@v3
        with:
          registry: us-central1-docker.pkg.dev
          username: oauth2accesstoken
          password: ${{ steps.auth.outputs.access_token }}
      - name: Push Interpreter Docker Image
        uses: docker/build-push-action@v2
        with:
          context: .
          file: docker/interpreter/Dockerfile
          push: true
          build-args: |
            IMAGE_VERSION=${{ needs.generate-release.outputs.version }}
          tags: |
            us-central1-docker.pkg.dev/${{ vars.GCP_PROJECT_ID }}/food-interpreter-repository/food-interpreter-interpreter:latest
            us-central1-docker.pkg.dev/${{ vars.GCP_PROJECT_ID }}/food-interpreter-repository/food-interpreter-interpreter:${{ env.SHA_SHORT }}
            us-central1-docker.pkg.dev/${{ vars.GCP_PROJECT_ID }}/food-interpreter-repository/food-interpreter-interpreter:${{ needs.generate-release.outputs.version }}
      - name: Push Gateway Docker Image
        uses: docker/build-push-action@v2
        with:
          context: .
          file: docker/gateway/Dockerfile
          push: true
          build-args: |
            IMAGE_VERSION=${{ needs.generate-release.outputs.version }}
            GCP_PROJECT_ID=${{ vars.GCP_PROJECT_ID }}
            TOPIC_ID=${{ needs.terraform-apply.outputs.interpreter_pubsub_topic_id }}
            INTERPRETER_GRPC_CLOUD_RUN_URI=${{ needs.terraform-apply.outputs.interpreter_grpc_cloud_run_uri }}
          tags: |
            us-central1-docker.pkg.dev/${{ vars.GCP_PROJECT_ID }}/food-interpreter-repository/food-interpreter-gateway:latest
            us-central1-docker.pkg.dev/${{ vars.GCP_PROJECT_ID }}/food-interpreter-repository/food-interpreter-gateway:${{ env.SHA_SHORT }}
            us-central1-docker.pkg.dev/${{ vars.GCP_PROJECT_ID }}/food-interpreter-repository/food-interpreter-gateway:${{ needs.generate-release.outputs.version }}
      - name: Push Interpreter gRPC Docker Image
        uses: docker/build-push-action@v2
        with:
          context: .
          file: docker/interpreter-grpc/Dockerfile
          push: true
          build-args: |
            IMAGE_VERSION=${{ needs.generate-release.outputs.version }}
          tags: |
            us-central1-docker.pkg.dev/${{ vars.GCP_PROJECT_ID }}/food-interpreter-repository/food-interpreter-interpreter-grpc:latest
            us-central1-docker.pkg.dev/${{ vars.GCP_PROJECT_ID }}/food-interpreter-repository/food-interpreter-interpreter-grpc:${{ env.SHA_SHORT }}
            us-central1-docker.pkg.dev/${{ vars.GCP_PROJECT_ID }}/food-interpreter-repository/food-interpreter-interpreter-grpc:${{ needs.generate-release.outputs.version }}
      - name: Update Cloud Run Services to their latest images
        run: |
          gcloud run services update "interpreter-cloud-run" --image us-central1-docker.pkg.dev/${{ vars.GCP_PROJECT_ID }}/food-interpreter-repository/food-interpreter-interpreter:latest --region ${{ vars.GCP_PROJECT_REGION }}
          gcloud run services update "gateway-cloud-run" --image us-central1-docker.pkg.dev/${{ vars.GCP_PROJECT_ID }}/food-interpreter-repository/food-interpreter-gateway:latest --region ${{ vars.GCP_PROJECT_REGION }}
          gcloud run services update "interpreter-grpc-cloud-run" --image us-central1-docker.pkg.dev/${{ vars.GCP_PROJECT_ID }}/food-interpreter-repository/food-interpreter-interpreter-grpc:latest --region ${{ vars.GCP_PROJECT_REGION }}
  api-testing:
    needs: [push-docker-image, terraform-apply]
    environment: prod
    permissions:
      contents: read
      id-token: write
    runs-on: ubuntu-latest
    steps:
      - name: Setup Github Actions checkout
        uses: actions/checkout@v4.2.2
      - name: Setup Workload Identity Federation
        id: auth
        uses: google-github-actions/auth@v2
        with:
          token_format: id_token
          workload_identity_provider: 'projects/${{ vars.GCP_WIF_PROJECT_NUMBER }}/locations/global/workloadIdentityPools/${{ vars.POOL_ID }}/providers/${{ vars.PROVIDER_ID }}'
          service_account: '${{ secrets.GCP_SERVICE_ACCOUNT_EMAIL }}'
          id_token_audience: '${{ needs.terraform-apply.outputs.gateway_cloud_run_uri }}'
      - name: Test gRPC endpoint
        env:
          gateway_uri: ${{ needs.terraform-apply.outputs.gateway_cloud_run_uri }}
          id_token: ${{ steps.auth.outputs.id_token }}
        run: ./test/scripts/grpc-test.sh
